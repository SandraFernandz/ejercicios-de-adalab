{"ast":null,"code":"var _jsxFileName = \"/Users/sanfer/Desktop/GitHub ADALAB/ejercicios-de-adalab/Mo\\u0301dulo03/Mod03-Lec1-Ejercicios/Mod03-L05/Mod03-L05-01Ejemplo-Api-LEIA/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/App.scss'; // Fichero src/components/App.js\n\nimport { useEffect, useState } from 'react';\nimport callToApi from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Estados\n  // Creamos characters para guardar los personajes respondidos por el API, por eso es un array vacío\n  const [characters, setCharacters] = useState([]); // Creamos searchName para gestionar el input de búsqueda, por eso es un string vacío\n\n  const [searchName, setSearchName] = useState(''); // useEffect\n\n  useEffect(() => {\n    // Aquí podemos poner código JS, por ejemplo podríamos llamar a callToApi dentro de un if\n    // Llamamos al API pasando por parámetros el searchName\n    callToApi(searchName).then(response => {\n      // Cuando el API responde guardamos los personajes en el estado\n      setCharacters(response);\n    }); // Este useEffect depende de searchName por eso ponemos [searchName]\n    // Cuando la usuaria cambia el searchName este useEffect se vuelve a ejecutar porque necesitamos llamar otra vez al API para obtener nuevos datos\n  }, [searchName]); // Eventos\n\n  const handleSearchName = ev => {\n    // Cuando la usuaria cambia el input guardamos su valor en el estado\n    setSearchName(ev.target.value);\n  }; // Renderizado\n\n\n  const renderCharacters = () => {\n    // Pintamos el listado de personajes respondido por el API\n    return characters.map((character, index) => {\n      // El API no nos devuelve un id para cada personaje, por eso usamos el index que nos da el map\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Nombre: \", character.name]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Llamar al API de Star Wars:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Busca por el nombre de tu personaje favorito:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        value: searchName,\n        onChange: handleSearchName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Personajes con el nombre: \", searchName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"rJ983bLlbXl3CttI/sZBgFtQZ4w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sanfer/Desktop/GitHub ADALAB/ejercicios-de-adalab/Módulo03/Mod03-Lec1-Ejercicios/Mod03-L05/Mod03-L05-01Ejemplo-Api-LEIA/src/components/App.js"],"names":["useEffect","useState","callToApi","App","characters","setCharacters","searchName","setSearchName","then","response","handleSearchName","ev","target","value","renderCharacters","map","character","index","name"],"mappings":";;;AAAA,OAAO,oBAAP,C,CACA;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AAEA;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C,CAJgB,CAKhB;;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C,CANgB,CAQhB;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AAEA;AACAE,IAAAA,SAAS,CAACI,UAAD,CAAT,CAAsBE,IAAtB,CAA4BC,QAAD,IAAc;AACvC;AACAJ,MAAAA,aAAa,CAACI,QAAD,CAAb;AACD,KAHD,EAJc,CAQd;AACA;AACD,GAVQ,EAUN,CAACH,UAAD,CAVM,CAAT,CAVgB,CAsBhB;;AAEA,QAAMI,gBAAgB,GAAIC,EAAD,IAAQ;AAC/B;AACAJ,IAAAA,aAAa,CAACI,EAAE,CAACC,MAAH,CAAUC,KAAX,CAAb;AACD,GAHD,CAxBgB,CA6BhB;;;AAEA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B;AACA,WAAOV,UAAU,CAACW,GAAX,CAAe,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AAC1C;AACA,0BAAO;AAAA,+BAAyBD,SAAS,CAACE,IAAnC;AAAA,SAASD,KAAT;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAHM,CAAP;AAID,GAND;;AAQA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,EAAE,EAAC,MAHL;AAIE,QAAA,KAAK,EAAEX,UAJT;AAKE,QAAA,QAAQ,EAAEI;AALZ;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAgBE;AAAA,+CAA+BJ,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF,eAiBE;AAAA,gBAAKQ,gBAAgB;AAArB;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA5DD;;GAAMX,G;;KAAAA,G;AA8DN,eAAeA,GAAf","sourcesContent":["import '../styles/App.scss';\n// Fichero src/components/App.js\nimport { useEffect, useState } from 'react';\nimport callToApi from '../services/api';\n\nconst App = () => {\n  // Estados\n\n  // Creamos characters para guardar los personajes respondidos por el API, por eso es un array vacío\n  const [characters, setCharacters] = useState([]);\n  // Creamos searchName para gestionar el input de búsqueda, por eso es un string vacío\n  const [searchName, setSearchName] = useState('');\n\n  // useEffect\n\n  useEffect(() => {\n    // Aquí podemos poner código JS, por ejemplo podríamos llamar a callToApi dentro de un if\n\n    // Llamamos al API pasando por parámetros el searchName\n    callToApi(searchName).then((response) => {\n      // Cuando el API responde guardamos los personajes en el estado\n      setCharacters(response);\n    });\n    // Este useEffect depende de searchName por eso ponemos [searchName]\n    // Cuando la usuaria cambia el searchName este useEffect se vuelve a ejecutar porque necesitamos llamar otra vez al API para obtener nuevos datos\n  }, [searchName]);\n\n  // Eventos\n\n  const handleSearchName = (ev) => {\n    // Cuando la usuaria cambia el input guardamos su valor en el estado\n    setSearchName(ev.target.value);\n  };\n\n  // Renderizado\n\n  const renderCharacters = () => {\n    // Pintamos el listado de personajes respondido por el API\n    return characters.map((character, index) => {\n      // El API no nos devuelve un id para cada personaje, por eso usamos el index que nos da el map\n      return <li key={index}>Nombre: {character.name}</li>;\n    });\n  };\n\n  return (\n    <div>\n      <h1>Llamar al API de Star Wars:</h1>\n\n      <form>\n        <label htmlFor=\"name\">\n          Busca por el nombre de tu personaje favorito:\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={searchName}\n          onChange={handleSearchName}\n        />\n      </form>\n\n      <h2>Personajes con el nombre: {searchName}</h2>\n      <ul>{renderCharacters()}</ul>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}