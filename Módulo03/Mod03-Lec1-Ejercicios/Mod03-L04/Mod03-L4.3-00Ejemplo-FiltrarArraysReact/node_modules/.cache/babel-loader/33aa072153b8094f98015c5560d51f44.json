{"ast":null,"code":"var _jsxFileName = \"/Users/sanfer/Desktop/GitHub ADALAB/ejercicios-de-adalab/Mo\\u0301dulo03/Mod03-Lec1-Ejercicios/Mod03-L2.4-Ej01/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/App.scss'; // Fichero src/components/App.js\n// Importamos useState desde React porque lo vamos a necesitar más abajo\n\nimport { useState } from 'react'; // Creamos la función o componente App. Esta vez lo creamos con una función arrow.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Creamos la constante de estado numberA y la función para modificarla setNumberA.\n  // El valor inicial que va a tener numberA es 0.\n  const [numberA, setNumberA] = useState(0);\n  const [numberB, setNumberB] = useState(0); // Creamos una función manejadora que se ejecutará cuando la usuaria haga click en el botón\n\n  const handleIncreaseNumberA = ev => {\n    // Cogemos el valor del input del primer número.\n    const clickedValue = 1; // Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n    // Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n    // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n\n    setNumberA(clickedValue);\n  };\n\n  const handleIncreaseNumberB = ev => {\n    // Cogemos el valor del input del primer número.\n    const startValue = 0; // Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n    // Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n    // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n\n    setNumberB(startValue);\n  }; // Creamos la constante total con la suma de los dos números.\n  // Esta línea de código es JS normal y corriente, no tiene nada que ver con React.\n\n\n  const total = parseInt(numberA) + parseInt(numberB);\n  console.log(total); // Retornamos todo el código HTML que queremos que React pinte en la página.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"El Contador:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Haz click para incrementar el n\\xFAmero\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          value: \"P\\xFAlsame\",\n          name: \"name\",\n          onClick: handleIncreaseNumberA\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          value: \"P\\xFAlsame\",\n          name: \"name\",\n          onClick: handleIncreaseNumberB\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"N\\xFAmero de veces que has hecho click: \", total]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"VbAbA694wr4TTTdmRwX9GY7Qqeg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sanfer/Desktop/GitHub ADALAB/ejercicios-de-adalab/Módulo03/Mod03-Lec1-Ejercicios/Mod03-L2.4-Ej01/src/components/App.js"],"names":["useState","App","numberA","setNumberA","numberB","setNumberB","handleIncreaseNumberA","ev","clickedValue","handleIncreaseNumberB","startValue","total","parseInt","console","log"],"mappings":";;;AAAA,OAAO,oBAAP,C,CAEA;AACA;;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CAAD,CAAtC,CAJgB,CAMhB;;AACA,QAAMM,qBAAqB,GAAIC,EAAD,IAAQ;AACpC;AACA,UAAMC,YAAY,GAAG,CAArB,CAFoC,CAGpC;AACA;AACA;;AACAL,IAAAA,UAAU,CAACK,YAAD,CAAV;AACD,GAPD;;AASA,QAAMC,qBAAqB,GAAIF,EAAD,IAAQ;AACpC;AACA,UAAMG,UAAU,GAAG,CAAnB,CAFoC,CAGpC;AACA;AACA;;AACAL,IAAAA,UAAU,CAACK,UAAD,CAAV;AACD,GAPD,CAhBgB,CAyBhB;AACA;;;AAEA,QAAMC,KAAK,GAAGC,QAAQ,CAACV,OAAD,CAAR,GAAoBU,QAAQ,CAACR,OAAD,CAA1C;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EA7BgB,CA+BhB;;AACA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AAAA,2EAGE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAC,YAFR;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,OAAO,EAAEL;AAJX;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAWE;AAAA,+BAEE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAC,YAFR;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,OAAO,EAAEG;AAJX;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAuBE;AAAA,6DAAyCE,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CA3DD;;GAAMV,G;;KAAAA,G;AA6DN,eAAeA,GAAf","sourcesContent":["import '../styles/App.scss';\n\n// Fichero src/components/App.js\n// Importamos useState desde React porque lo vamos a necesitar más abajo\nimport { useState } from 'react';\n\n// Creamos la función o componente App. Esta vez lo creamos con una función arrow.\nconst App = () => {\n  // Creamos la constante de estado numberA y la función para modificarla setNumberA.\n  // El valor inicial que va a tener numberA es 0.\n  const [numberA, setNumberA] = useState(0);\n  const [numberB, setNumberB] = useState(0);\n\n  // Creamos una función manejadora que se ejecutará cuando la usuaria haga click en el botón\n  const handleIncreaseNumberA = (ev) => {\n    // Cogemos el valor del input del primer número.\n    const clickedValue = 1;\n    // Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n    // Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n    // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n    setNumberA(clickedValue);\n  };\n\n  const handleIncreaseNumberB = (ev) => {\n    // Cogemos el valor del input del primer número.\n    const startValue = 0;\n    // Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n    // Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n    // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n    setNumberB(startValue);\n  };\n\n  // Creamos la constante total con la suma de los dos números.\n  // Esta línea de código es JS normal y corriente, no tiene nada que ver con React.\n\n  const total = parseInt(numberA) + parseInt(numberB);\n  console.log(total);\n\n  // Retornamos todo el código HTML que queremos que React pinte en la página.\n  return (\n    <div>\n      <h1>El Contador:</h1>\n      <form>\n        <label>\n          Haz click para incrementar el número\n          {/* En esta línea indicamos que cuando cambie el input se ejecute la función manejadora handleIncreaseNumberA */}\n          <input\n            type=\"button\"\n            value=\"Púlsame\"\n            name=\"name\"\n            onClick={handleIncreaseNumberA}\n          />\n        </label>\n        <label>\n          {/* En esta línea indicamos que cuando cambie el input se ejecute la función manejadora handleIncreaseNumberB */}\n          <input\n            type=\"button\"\n            value=\"Púlsame\"\n            name=\"name\"\n            onClick={handleIncreaseNumberB}\n          />\n        </label>\n      </form>\n      <p>Número de veces que has hecho click: {total}</p>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}