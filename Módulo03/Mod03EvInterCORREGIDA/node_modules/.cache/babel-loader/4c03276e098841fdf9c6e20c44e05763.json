{"ast":null,"code":"var _jsxFileName = \"/Users/sanfer/Desktop/GitHub ADALAB/Evaluaciones/Mod03EvInterCORREGIDA/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/App.scss';\nimport { useState } from 'react';\nimport dataClubs from '../data/clubs.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Estados\n  // Constante dde guardo mi array con data inicial (dataClubs)\n  const [clubs, setClubs] = useState(dataClubs); // 7 creamos variables de estado para el contenido de los inputs, poder recogerlos y actualizarlos con su función asingada- react monitoriza esos datos\n\n  const [name, setName] = useState(''); // 8 estas variables son tipo de dato booleano. no son strings.\n  // Los monitorizamos con la prop checked y por defecto no queremos que aparezcan chequeados- false\n\n  const [openOnWeekdays, setOpenOnWeedays] = useState(false);\n  const [openOnWeekend, setOpenOnWeekend] = useState(false);\n  const [filter, setFilter] = useState('all'); // Eventos\n\n  const handleFilter = ev => {\n    setFilter(ev.target.value);\n  }; // 11 función manejadora del evento onChange que actualiza el valor del input de nombre\n\n\n  const handleName = ev => {\n    setName(ev.target.value);\n  }; // 13 función manejadora de input tipo checkbox(checkbox no tiene value, no se introduce texto. por ello monitoreamos el atributo prev creado, checked- dame lo q esté en checked )\n\n\n  const handleOpenOnWeekdays = ev => {\n    setOpenOnWeedays(ev.target.checked);\n  }; // 14 función manejadora del 2o checkbox\n\n\n  const handleOpenOnWeekend = ev => {\n    setOpenOnWeekend(ev.target.chedked);\n  }; // 17 creo función manejadora ev y prevDef xq es submit y no queremos que se resetee\n\n\n  const handleSubmit = ev => {\n    ev.preventDefault();\n    clubs.push( // 18 creo estructura nuevo objeto que será creado con variables de estado en su valor\n    {\n      name: name,\n      openOnWeekdays: openOnWeekdays,\n      openOnWeekend: openOnWeekend\n    });\n    setClubs([...clubs]);\n  }; // 1- Pinto el array inicial con .maps, que toma dos parámetros: cada elemento del array (club, en este caso será un objeto) y el indice del elemento. .maps devuelve un return.\n\n\n  const renderClubs = () => {\n    return clubs.filter(club => {\n      if (filter === 'openOnWeekdays') {\n        return club.openOnWeedays === true;\n      } else if (filter === 'openOnWeekend') {\n        return club.setOpenOnWeekend === true;\n      }\n\n      return true;\n    }).map((club, index) => {\n      return (\n        /*#__PURE__*/\n\n        /*4- valor único con index si array no contiene ids */\n        _jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: club.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Abierto entre semana: \", club.openOnWeekdays ? 'Sí' : 'No']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Abierto fines de semana: \", club.openOnWeekend ? 'Sí' : 'No']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      );\n    });\n  };\n  /* 3- Este es el return de la función ppal IMP no olvidarlo */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filter,\n          onChange: handleFilter,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"Todos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"openOnWeekDays\",\n            children: \"Abren entre semana\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"openOnWeekend\",\n            children: \"Abren fines de semana\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderClubs()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"\",\n        children: \"Nombre del Club \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\" // 9 añadimos un value al input para que ese valor siempre esté monitorizado y actualizado a través de variable de estado\n        ,\n        value: name // 10 función evento que modifique el estado\n        ,\n        onChange: handleName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"openOnWeekdays\",\n          children: \"\\xBFAbre entre semana?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"openOnWeekdays\",\n          id: \"openOnWeekdays\",\n          checked: openOnWeekdays,\n          onChange: handleOpenOnWeekdays\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"\",\n        children: \"\\xBFAbre el fin de semana?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: \"openOnWeekend\",\n        checked: openOnWeekend,\n        onChange: handleOpenOnWeekend,\n        id: \"openOnWeekend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          name: \"btn\",\n          id: \"btn\",\n          value: \"A\\xF1adir un  nuevo club\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WkU1sCNAxnRi7lPYzjFShrzMJEE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sanfer/Desktop/GitHub ADALAB/Evaluaciones/Mod03EvInterCORREGIDA/src/components/App.js"],"names":["useState","dataClubs","App","clubs","setClubs","name","setName","openOnWeekdays","setOpenOnWeedays","openOnWeekend","setOpenOnWeekend","filter","setFilter","handleFilter","ev","target","value","handleName","handleOpenOnWeekdays","checked","handleOpenOnWeekend","chedked","handleSubmit","preventDefault","push","renderClubs","club","openOnWeedays","map","index"],"mappings":"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","sourcesContent":["import '../styles/App.scss';\nimport { useState } from 'react';\nimport dataClubs from '../data/clubs.json';\n\nfunction App() {\n  // Estados\n\n  // Constante dde guardo mi array con data inicial (dataClubs)\n  const [clubs, setClubs] = useState(dataClubs);\n  // 7 creamos variables de estado para el contenido de los inputs, poder recogerlos y actualizarlos con su función asingada- react monitoriza esos datos\n  const [name, setName] = useState('');\n  // 8 estas variables son tipo de dato booleano. no son strings.\n  // Los monitorizamos con la prop checked y por defecto no queremos que aparezcan chequeados- false\n  const [openOnWeekdays, setOpenOnWeedays] = useState(false);\n  const [openOnWeekend, setOpenOnWeekend] = useState(false);\n  const [filter, setFilter] = useState('all');\n\n  // Eventos\n\n  const handleFilter = (ev) => {\n    setFilter(ev.target.value);\n  };\n  // 11 función manejadora del evento onChange que actualiza el valor del input de nombre\n  const handleName = (ev) => {\n    setName(ev.target.value);\n  };\n  // 13 función manejadora de input tipo checkbox(checkbox no tiene value, no se introduce texto. por ello monitoreamos el atributo prev creado, checked- dame lo q esté en checked )\n  const handleOpenOnWeekdays = (ev) => {\n    setOpenOnWeedays(ev.target.checked);\n  };\n\n  // 14 función manejadora del 2o checkbox\n  const handleOpenOnWeekend = (ev) => {\n    setOpenOnWeekend(ev.target.chedked);\n  };\n  // 17 creo función manejadora ev y prevDef xq es submit y no queremos que se resetee\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    clubs.push(\n      // 18 creo estructura nuevo objeto que será creado con variables de estado en su valor\n      {\n        name: name,\n        openOnWeekdays: openOnWeekdays,\n        openOnWeekend: openOnWeekend,\n      }\n    );\n    setClubs([...clubs]);\n  };\n\n  // 1- Pinto el array inicial con .maps, que toma dos parámetros: cada elemento del array (club, en este caso será un objeto) y el indice del elemento. .maps devuelve un return.\n\n  const renderClubs = () => {\n    return clubs\n      .filter((club) => {\n        if (filter === 'openOnWeekdays') {\n          return club.openOnWeedays === true;\n        } else if (filter === 'openOnWeekend') {\n          return club.setOpenOnWeekend === true;\n        }\n        return true;\n      })\n      .map((club, index) => {\n        return (\n          /*4- valor único con index si array no contiene ids */\n          <li key={index}>\n            <h2>{club.name}</h2>\n            {/* 5 Traducimos valores de 1 obj del a variables para poder pintar todos los objetos. En el array original tenemos true/false para estas propiedades del objeto (openOnWeekdays, pero no puedo ponerlo así. En esos casos creamos un operador ternario- */}\n            <p>Abierto entre semana: {club.openOnWeekdays ? 'Sí' : 'No'}</p>\n            <p>Abierto fines de semana: {club.openOnWeekend ? 'Sí' : 'No'}</p>\n          </li>\n        );\n      });\n  };\n\n  /* 3- Este es el return de la función ppal IMP no olvidarlo */\n\n  return (\n    <div>\n      <header>\n        <form action=\"\">\n          <select value={filter} onChange={handleFilter}>\n            <option value=\"all\">Todos</option>\n            <option value=\"openOnWeekDays\">Abren entre semana</option>\n            <option value=\"openOnWeekend\">Abren fines de semana</option>\n          </select>\n        </form>\n      </header>\n\n      {/* 2- Invoco a la función que va a pintar el array */}\n\n      <ul>{renderClubs()}</ul>\n      {/* 6 Creamos el resto de la estructura del html */}\n      {/* 16 creamos evento onSubmit para que se cree un nuevo objeto del array cd desee ususario. Tb podríamos añadir en su lugar un ev onClick (no onSubmit para el boton) al botón de input más abajo en su lugar*/}\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"\">Nombre del Club </label>\n\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          // 9 añadimos un value al input para que ese valor siempre esté monitorizado y actualizado a través de variable de estado\n          value={name}\n          // 10 función evento que modifique el estado\n          onChange={handleName}\n        />\n        <p>\n          <label htmlFor=\"openOnWeekdays\">¿Abre entre semana?</label>\n          {/* 12 monitoreamos los inputs tipo checkbox.IMP: checkbox nunca cambia su value, por tanto no puedo usar en la función manejadora del evento .value, sino .checked para ello creo la propiedad checked con valor variable de estado q cambia si marcamos o no */}\n          <input\n            type=\"checkbox\"\n            name=\"openOnWeekdays\"\n            id=\"openOnWeekdays\"\n            checked={openOnWeekdays}\n            onChange={handleOpenOnWeekdays}\n          />\n        </p>\n        <label htmlFor=\"\">¿Abre el fin de semana?</label>\n        <input\n          type=\"checkbox\"\n          name=\"openOnWeekend\"\n          checked={openOnWeekend}\n          onChange={handleOpenOnWeekend}\n          id=\"openOnWeekend\"\n        />\n        <p>\n          <input\n            type=\"submit\"\n            name=\"btn\"\n            id=\"btn\"\n            value=\"Añadir un  nuevo club\"\n          />\n        </p>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}